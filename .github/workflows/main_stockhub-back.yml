# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: CI/CD Pipeline - stockhub-back

on:
  push:
    branches: [ "*" ]  # CI s'exécute sur toutes les branches
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # CI Job - s'exécute sur toutes les branches
  continuous-integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "20.x"
      - run: npm ci
      - run: npx tsc --noEmit
      - run: npm run lint --if-present
      - run: npm run test:unit


      #  integration-tests:
      #    runs-on: ubuntu-latest
      #    services:
      #      mysql:
      #        image: mysql:8.0
      #        env:
      #          MYSQL_ROOT_PASSWORD: root
      #          MYSQL_DATABASE: stockhub_test
      #        ports:
      #          - 3308:3306
      #        options: >-
      #          --health-cmd="mysqladmin ping -h localhost -proot"
      #          --health-interval=10s
      #          --health-timeout=5s
      #          --health-retries=5
      #    steps:
      #      - uses: actions/checkout@v4
      #      - uses: actions/setup-node@v3
      #        with:
      #          node-version: "18.x"
      #      - run: npm ci

      #      - name: Reset & migrate database for tests
      #        run: npx prisma migrate reset --force --skip-generate --schema=prisma/schema.prisma
      #        env:
      #          DATABASE_URL: "mysql://root:root@localhost:3308/stockhub_test"
  #      - name: Wait for MySQL to be ready
  #        run: |
  #          until mysqladmin ping -h"127.0.0.1" -P3308 -uroot -proot --silent; do
  #            echo 'Waiting for MySQL...'
  #            sleep 2
  #          done
  #          echo 'MySQL is ready!'
  #
  #      - name: Create database schema
  #        run: |
  #          mysql -h 127.0.0.1 -P 3308 -u root -proot stockhub_test << 'EOF'
  #          -- Créer la table users
  #          CREATE TABLE IF NOT EXISTS users (
  #            ID INT AUTO_INCREMENT PRIMARY KEY,
  #            EMAIL VARCHAR(255) NOT NULL,
  #            CONSTRAINT unique_email UNIQUE (EMAIL)
  #          );
  #
  #          -- Créer la table stocks
  #          CREATE TABLE IF NOT EXISTS stocks (
  #            ID INT AUTO_INCREMENT PRIMARY KEY,
  #            LABEL VARCHAR(255) NOT NULL,
  #            DESCRIPTION VARCHAR(255) NULL,
  #            CATEGORY ENUM('alimentation', 'hygiene', 'artistique') DEFAULT 'alimentation',
  #            USER_ID INT NULL,
  #            CONSTRAINT stocks_ibfk_1 FOREIGN KEY (USER_ID) REFERENCES users (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
  #          );
  #
  #          -- Créer la table items
  #          CREATE TABLE IF NOT EXISTS items (
  #            ID INT AUTO_INCREMENT PRIMARY KEY,
  #            LABEL VARCHAR(255) NULL,
  #            DESCRIPTION VARCHAR(255) NULL,
  #            QUANTITY INT NULL,
  #            MINIMUM_STOCK INT DEFAULT 1,
  #            STOCK_ID INT NOT NULL,
  #            CONSTRAINT items_ibfk_1 FOREIGN KEY (STOCK_ID) REFERENCES stocks (ID) ON DELETE CASCADE ON UPDATE CASCADE
  #          );
  #
  #          -- Créer les index
  #          CREATE INDEX STOCK_ID ON items (STOCK_ID);
  #          CREATE INDEX stocks_ibfk_1 ON stocks (USER_ID);
  #          EOF
  #      - name: Verify database setup
  #        run: |
  #          echo "=== Tables created ==="
  #          mysql -h 127.0.0.1 -P 3308 -u root -proot stockhub_test -e "SHOW TABLES;"
  #          echo "=== Items table structure ==="
  #          mysql -h 127.0.0.1 -P 3308 -u root -proot stockhub_test -e "DESCRIBE items;"
  #          echo "=== Stocks table structure ==="
  #          mysql -h 127.0.0.1 -P 3308 -u root -proot stockhub_test -e "DESCRIBE stocks;"
  #          echo "=== Users table structure ==="
  #          mysql -h 127.0.0.1 -P 3308 -u root -proot stockhub_test -e "DESCRIBE users;"
  #
  #      - name: Generate Prisma Client
  #        run: npx prisma generate --schema=prisma/schema.prisma
  #        env:
  #          DATABASE_URL: "mysql://root:root@localhost:3308/stockhub_test"
  #
  #      - name: Run integration tests
  #        run: npm run test:integration
  #        env:
  #          DATABASE_URL: "mysql://root:root@localhost:3308/stockhub_test"


  # Build et Deploy - ne s'exécute QUE sur la branche main
  build-and-deploy:
    runs-on: ubuntu-latest
    # Condition: ne s'exécute que sur push vers main
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs:
      - continuous-integration
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Remove node_modules
        run: rm -rf node_modules

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact
        run: unzip -o release.zip

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: "stockhub-back"
          slot-name: "Production"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_0AA0D7238FBD4490A877AF8BEC437386 }}
          package: .

